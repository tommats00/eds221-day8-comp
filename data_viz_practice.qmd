---
title: "EDS 221: day 8 interactive"
author: "Tom Gibbens-Matsuyama"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

```{r}
library(tidyverse)
library(here)
library(janitor)

install.packages("patchwork")
install.packages("gghighlight")
install.packages("ggrepel")
install.packages("paletteer")
install.packages("ggExtra")
install.packages("ggbeeswarm")
```

```{r}
# attach packages

library(tidyverse)
library(here)
library(janitor)
library(patchwork)
library(ggExtra)
library(ggrepel)
library(ggbeeswarm)
library(gghighlight)
library(paletteer)

```

## Read in Csv

```{r}
lizards <- read.csv(here("data_tidy", "lizards.csv"))
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() + 
  geom_line() ## same graph but added geom_line to show that data viz is created in LAYERS

ggplot(data = lizards) +
  geom_point(aes(x = total_length, y = weight)) ## These are the exact same graphic

ggplot() +
  geom_point(data = lizards, aes(x = total_length, y = weight)) # ALL EXACT SAME GRAPH 

# by putting data in the geom_point() instead of ggplot() we can use different data sources. 
# if we do it in ggplot() then that data would be applied throughout ALL LAYERS 
```

```{r}
ggplot(data = lizards, aes(x = total_length)) +
  geom_histogram()
```

```{r}
# jitter plot: 

ggplot(data = lizards, aes(y = common_name, x = weight)) +
  geom_jitter()
```

```{r}
## dont need to use aes() to update a variable

ggplot(data = lizards, aes(x = weight)) + 
  geom_histogram(color = "orange",
                 fill = "purple",
                 linewidth = 2,
                 linetype = "dotted")  ## fill "fills" a color of the graph
                                        ## color is the border "color"
                                      # linewidth changes how thick the border line is
                                      # linetype changes what line type it is
```

```{r}
ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(color = "219EBC",
             fill = "blue",
             shape = 22,
             size = 2,
             alpha = 0.35)
```

```{r}
## updating aes() based on a variable

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name,
                 size = total_length),
             alpha = 0.5) +
  scale_color_discrete(type = c("#D9ED92",
                                  "#B5E48C",
                                  "#99D98C",
                                  "#76C893",
                                  "#52B69A",
                                  "#34A0A4",
                                  "#168AAD"))

```

```{r}

## using themes in ggplot

ggplot(data = lizards, aes(x = site, y = weight)) +
  geom_jitter(aes(color = common_name)) +
  theme_light()
```

```{r}

## labels for graphs

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  labs(x = "Total Length (mm)",
       y = "Weight (g)",
       title = "Lizard Size")
```

```{r}

## facet_wrap function

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() + 
  facet_wrap(~common_name,
             ncol = 3,
             scales = "free") +
  labs(x = "Total Length (mm)",
       y = "Weight (grams)")
```

```{r}

## facet_grid function

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  facet_grid(sex ~ tail)
```

```{r}
lizards_counts <- lizards %>% 
  count(common_name)

ggplot(data = lizards_counts, aes(y = fct_reorder(common_name, n), x = n)) +
  geom_col()

```

```{r}
ggplot(data = lizards,
       aes(x = total_length, y = weight)) +
  geom_point(aes(color = common_name),
             size =2) +
  theme_minimal() +
  labs(x = "Total length (mm)",
       y = "Weight (grams)",
       color = "Lizard Species") +
  facet_wrap(~common_name, scales = "free")
```

```{r}
ggplot(data = lizards, aes(y = fct_infreq(common_name))) +
  geom_bar(aes(fill = site)) +
  theme_minimal() +
  labs(x = "Lizard Counts",
       y = "Species (common name)") +
  facet_grid(sex ~ tail)
```

```{r}

# using scale_y_continuous function 
# breaks and limits 

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point() +
  scale_x_continuous(breaks = seq(0, 500, by = 250),
                     limits = c(0,500)) +
scale_y_continuous(breaks = seq(from = 0, to = 70, by = 10),
                   limits = c(0,70)) +
  theme_light()
```

```{r}

## using scales package
## using scales_"_" functions as well
## scale_x_date(breaks = scales::breaks_pretty() can use this to automatically "break" scaling

lizards_counts <- lizards %>% 
  mutate(date = lubridate::mdy(date)) %>% 
  count(date)

ggplot(data = lizards_counts, aes(x = date, y = n)) +
  geom_line() + 
  scale_x_date(breaks = scales::breaks_width("3 years"),
               labels = scales::label_date("%Y")) +
  labs(x = "Date",
       y = "Number of lizards (n)")
```

```{r}
## adding color gradient to your graphs
## scale_color_gradientn(), can mannually tell what colors you want 
##   scale_color_gradient(low = "red", high = "navy")

ggplot(data = lizards, aes(x = total_length, y = weight)) +
  geom_point(aes(color = total_length)) +
  scale_color_steps2(low = "green", mid = "white", high = "red", midpoint = 150,
                     breaks = c(50, 75, 150, 180, 220, 280))
  


## scale_color_steps(low = "red", high = "black")
  
## scale_color_gradientn(colors = c("orange", "red", "purple", "navy", "black"))

```

```{r}

# doing crazy things to your graph

p <- ggplot(lizards, aes(x = total_length, y = weight)) +
  geom_point()

p +
  theme(panel.grid.minor = element_blank(),
        panel.grid.major = element_line(color = "red"),
        plot.background = element_rect(fill = "pink"),
        text = element_text(size = 12, family = "serif"),
        axis.text.x = element_text(color = "blue"),
        axis.text.y = element_text(color = "green"),
        panel.background = element_rect(color = "purple", fill = "yellow"))
```

```{r}

## ADDING vertical and horizontal lines to graph

p + 
  geom_hline(yintercept = mean(lizards$weight), color = "blue", linetype = "dashed") +
  geom_vline(xintercept = 100, color = "red") +
 #  annotate("text", x = 100, y = 50, label = "COOL", color = "purple") +
  annotate("text", x = 350, y = mean(lizards$weight) + 2, label = "Mean Weight") 
```

```{r}

## monster graphic, 


mono <- read_csv(here("data_tidy", "mono.csv"))

ggplot(data = mono, aes(x = year, y = lake_level)) +
  geom_rect(aes(xmin = 1941,
                xmax = 1983,
                ymin = 6350,
                ymax = 6440),
            fill = "gray90") +
  geom_line() +
  labs(x = "Year",
       y = "Lake surface level\n(feet above sea level)\n",  # ## \n puts label on separate line
       title = "Mono lake (1850 - 2017)",
       caption = "Data: Mono Basin Clearinghouse") +
  scale_y_continuous(limits = c(6350, 6440),
                     breaks = c(6370, 6400, 6430),
                     labels = scales::label_comma()) + ## adds comma on the x axis 
  scale_x_continuous(limits = c(1850, 2020),
                     breaks = seq(1850, 2010, 20),
                     expand = c(0,0)) +
  geom_hline(yintercept = 6360, linetype = "dashed") +
  annotate("text", x = 1910, y = 6370,
           label = "Decreased shrimp abundance expected\n(6,360 feet above sea level)") +
  annotate("text", x = 1962, y = 6425,
           label = "unrestricted diversions\n(1941 - 1983)",
           size = 3) +
  theme_minimal()

```

